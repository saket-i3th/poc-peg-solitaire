import { BoardTypes } from "./../constants/BoardTypes";
export interface IBoardConfig {
    type: string;
    data: number[][];
}
export class BoardConfig {
    private static _data: IBoardConfig[] = [
        {
            type: BoardTypes.STANDARD,
            data: [
                [-1, -1, 1, 1, 1, -1, -1],
                [-1, -1, 1, 1, 1, -1, -1],
                [1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 0, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1],
                [-1, -1, 1, 1, 1, -1, -1],
                [-1, -1, 1, 1, 1, -1, -1],
            ],
        },
        {
            type: BoardTypes.FRENCH,
            data: [
                [-1, -1, 1, 1, 1, -1, -1],
                [-1, 1, 1, 1, 1, 1, -1],
                [1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 0, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1],
                [-1, 1, 1, 1, 1, 1, -1],
                [-1, -1, 1, 1, 1, -1, -1],
            ],
        },
        {
            type: BoardTypes.SIX_X_SIX,
            data: [
                [1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1],
                [1, 1, 1, 0, 1, 1],
                [1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1],
            ],
        },
        {
            type: BoardTypes.DIAMOND_41,
            data: [
                [-1, -1, -1, -1, 1, -1, -1, -1, -1],
                [-1, -1, -1, 1, 1, 1, -1, -1, -1],
                [-1, -1, 1, 1, 1, 1, 1, -1, -1],
                [-1, 1, 1, 1, 1, 1, 1, 1, -1],
                [1, 1, 1, 1, 0, 1, 1, 1, 1],
                [-1, 1, 1, 1, 1, 1, 1, 1, -1],
                [-1, -1, 1, 1, 1, 1, 1, -1, -1],
                [-1, -1, -1, 1, 1, 1, -1, -1, -1],
                [-1, -1, -1, -1, 1, -1, -1, -1, -1],
            ],
        },
        {
            type: BoardTypes.DIAMOND_37,
            data: [
                [-1, -1, -1, -1, 1, -1, -1, -1, -1],
                [-1, -1, -1, 1, 1, 1, -1, -1, -1],
                [-1, -1, -1, 1, 1, 1, -1, -1, -1],
                [-1, 1, 1, 1, 1, 1, 1, 1, -1],
                [1, 1, 1, 1, 0, 1, 1, 1, 1],
                [-1, 1, 1, 1, 1, 1, 1, 1, -1],
                [-1, -1, -1, 1, 1, 1, -1, -1, -1],
                [-1, -1, -1, 1, 1, 1, -1, -1, -1],
                [-1, -1, -1, -1, 1, -1, -1, -1, -1],
            ],
        },
        {
            type: BoardTypes.DIAMOND_39,
            data: [
                [-1, -1, -1, 1, -1, -1, -1],
                [-1, -1, 1, 1, 1, -1, -1],
                [-1, 1, 1, 1, 1, 1, -1],
                [1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 0, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1],
                [-1, 1, 1, 1, 1, 1, -1],
                [-1, -1, 1, 1, 1, -1, -1],
                [-1, -1, -1, 1, -1, -1, -1],
            ],
        },
        {
            type: BoardTypes.DIAMOND_32,
            data: [
                [-1, -1, -1, 1, -1, -1, -1],
                [-1, -1, 1, 1, 1, -1, -1],
                [-1, 1, 1, 1, 1, 1, -1],
                [1, 1, 1, 0, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1],
                [-1, 1, 1, 1, 1, 1, -1],
                [-1, -1, 1, 1, 1, -1, -1],
                [-1, -1, -1, 1, -1, -1, -1],
            ],
        },
    ];

    public static getBoardConfigData(boardType: string): number[][] {
        let result: IBoardConfig = {
            type: "",
            data: [],
        };
        this._data.forEach((boardConfig: IBoardConfig) => {
            if (boardType === boardConfig.type) {
                result = boardConfig;
            }
        });
        const copy: number[][] = [];
        for (let i = 0; i < result.data.length; i++) {
            copy[i] = [...result.data[i]];
        }

        return copy;
    }
}
